{{{
/**
 * 
 */
package cn.com.believer.songyuanframework.openapi.storage.box.examples;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import cn.com.believer.songyuanframework.openapi.storage.box.BoxExternalAPI;
import cn.com.believer.songyuanframework.openapi.storage.box.constant.BoxConstant;
import cn.com.believer.songyuanframework.openapi.storage.box.factories.BoxRequestFactory;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.CreateFolderRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.CreateFolderResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DeleteRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.DownloadRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAccountTreeRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.GetAuthTokenResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.LogoutRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.PublicShareRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.RegisterNewUserRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.RegisterNewUserResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.UploadResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.VerifyRegistrationEmailRequest;
import cn.com.believer.songyuanframework.openapi.storage.box.functions.VerifyRegistrationEmailResponse;
import cn.com.believer.songyuanframework.openapi.storage.box.impl.simple.SimpleBoxImpl;
import cn.com.believer.songyuanframework.openapi.storage.box.objects.BoxException;
import cn.com.believer.songyuanframework.openapi.storage.box.objects.UploadResult;

/**
 * @author jjia
 * 
 */
public class Tutorial {

    /** the api key, you can change it to yours. */
    public static final String API_KEY = "e7ak8t2je0rxoq97k9sl2fh2mld1dn6x";

    /**
     * @param args
     */
    public static void main(String[] args) {
        // the global api interface
        BoxExternalAPI iBoxExternalAPI = new SimpleBoxImpl();

        try {
            // create a user, first we check if email is ok to register?
            String email = "test" + System.currentTimeMillis() + "@test.com";
            VerifyRegistrationEmailRequest verifyRegistrationEmailRequest = BoxRequestFactory
                    .createVerifyRegistrationEmailRequest(API_KEY, email);
            VerifyRegistrationEmailResponse verifyEmailResponse = iBoxExternalAPI
                    .verifyRegistrationEmail(verifyRegistrationEmailRequest);

            // quit if email is not ok.
            if (!BoxConstant.STATUS_EMAIL_OK.equals(verifyEmailResponse
                    .getStatus())) {
                System.out.println("email is not ok to register! status code="
                        + verifyEmailResponse.getStatus());
                System.exit(0);
            }

            // now we create a new box.net account
            String password = "888888";
            RegisterNewUserRequest registerNewUserRequest = BoxRequestFactory
                    .createRegisterNewUserRequest(API_KEY, email, password);
            RegisterNewUserResponse registerNewUserResponse = iBoxExternalAPI
                    .registerNewUser(registerNewUserRequest);
            if (!BoxConstant.STATUS_SUCCESSFUL_REGISTER
                    .equals(registerNewUserResponse.getStatus())) {
                System.out
                        .println("unable to register a box.net user! status code="
                                + registerNewUserResponse.getStatus());
                System.exit(0);
            }

            // waiting...
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // login with this account
            GetAuthTokenResponse getAuthTokenResponse = iBoxExternalAPI
                    .authentication(email, password, API_KEY);
            String authToken = getAuthTokenResponse.getAuthToken();

            // create a folder
            CreateFolderRequest createFolderRequest = BoxRequestFactory
                    .createCreateFolderRequest(API_KEY, authToken, "0",
                            "folderName" + System.currentTimeMillis(), false);
            CreateFolderResponse createFolderResponse = iBoxExternalAPI
                    .createFolder(createFolderRequest);
            String createdFolderId = createFolderResponse.getFolder()
                    .getFolderId();

            // create a temp file for upload
            File tmpFile = File.createTempFile("This-is-a-Temp-File"
                    + System.currentTimeMillis(), ".txt");
            tmpFile.deleteOnExit();
            BufferedWriter out = new BufferedWriter(new FileWriter(tmpFile));
            out.write("this is a test file for upload"
                    + +System.currentTimeMillis());
            out.close();

            // upload a file to the created folder.
            Map fileMap = new HashMap();
            fileMap.put(tmpFile.getName(), tmpFile);
            UploadRequest uploadRequest = BoxRequestFactory
                    .createUploadRequest(authToken, true, createdFolderId,
                            fileMap);
            UploadResponse uploadResponse = iBoxExternalAPI
                    .upload(uploadRequest);

            UploadResult uploadResult = (UploadResult) uploadResponse
                    .getUploadResultList().get(0);
            String uploadedFileId = uploadResult.getFile().getFileId();

            HashMap nameBytesHashMap = new HashMap();
            nameBytesHashMap.put("fileName.txt", "fileName.txt".getBytes());
            uploadRequest = BoxRequestFactory.createUploadRequest(authToken,
                    false, createdFolderId, nameBytesHashMap);
            iBoxExternalAPI.upload(uploadRequest);

            // share this folder
            PublicShareRequest publicShareRequest = BoxRequestFactory
                    .createPublicShareRequest(API_KEY, authToken, "folder",
                            "888888", createdFolderId,
                            "this is my public folder !", null);
            iBoxExternalAPI.publicShare(publicShareRequest);

            // get account file/folder tree structure
            String[] params = { "nozip" };
            GetAccountTreeRequest getAccountTreeRequest = BoxRequestFactory
                    .createGetAccountTreeRequest(API_KEY, authToken, "0",
                            params);
            iBoxExternalAPI.getAccountTree(getAccountTreeRequest);

            // download the file
            File tmpFile2 = new File("downloadedFileNo."
                    + System.currentTimeMillis() + ".txt");
            tmpFile2.createNewFile();
            DownloadRequest downloadRequest = BoxRequestFactory
                    .createDownloadRequest(authToken, uploadedFileId, true,
                            tmpFile2);
            iBoxExternalAPI.download(downloadRequest);

            // delete this file
            DeleteRequest deleteRequest = BoxRequestFactory
                    .createDeleteRequest(API_KEY, authToken, "file",
                            uploadedFileId);
            iBoxExternalAPI.delete(deleteRequest);

            // logout
            LogoutRequest logoutRequest = BoxRequestFactory
                    .createLogoutRequest(API_KEY, authToken);
            iBoxExternalAPI.logout(logoutRequest);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (BoxException e) {
            e.printStackTrace();
        }

    }
}

}}}